import os
from typing import Dict, Optional, Tuple

import pandas as pd
import streamlit as st
import requests  # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è URL –±—ç–∫–µ–Ω–¥–∞, —á—Ç–æ–±—ã —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–ª–æ –≤ Docker
# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ Docker –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å "http://127.0.0.1:8000"
BACKEND_BASE_URL = os.environ.get("API_URL", "http://127.0.0.1:8000")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω—ã
GENERATE_SQL_API_ENDPOINT = f"{BACKEND_BASE_URL}/api/generate_sql"
EXECUTE_SQL_API_ENDPOINT = f"{BACKEND_BASE_URL}/api/execute_sql"

API_TIMEOUT = 60  # –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    st.set_page_config(page_title="AI SQL –ê–Ω–∞–ª–∏—Ç–∏–∫", layout="wide")

    if "messages" not in st.session_state:
        reset_session_state()

    show_sidebar()
    display_chat_view()


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API ---

def get_sql_from_backend(question: str) -> Tuple[Optional[Dict], Optional[str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL –æ—Ç –±—ç–∫–µ–Ω–¥–∞ (OpenAI)."""
    # –¢–∞–∫ –∫–∞–∫ –±—ç–∫–µ–Ω–¥ –≤—Å–µ –µ—â–µ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É.
    request_body = {
        "question": question,
        "user_name": "default_user"
    }
    try:
        response = requests.post(GENERATE_SQL_API_ENDPOINT, json=request_body, timeout=API_TIMEOUT)
        response.raise_for_status()
        return response.json(), None
    except requests.exceptions.RequestException as e:
        error_msg = f"Failed to get response from AI backend: {e}"
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –æ—Ç FastAPI
            error_detail = e.response.json().get('detail', str(e))
            error_msg = f"Error from AI backend: {error_detail}"
        except (ValueError, AttributeError):
            pass
        return None, error_msg


@st.cache_data(show_spinner=False)
def get_query_exec_result(query: str) -> Tuple[Optional[pd.DataFrame], Optional[str]]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥."""
    try:
        response = requests.post(EXECUTE_SQL_API_ENDPOINT, json={"sql_query": query})
        response.raise_for_status()
        data = response.json()
        if data.get("data") is not None:
            df = pd.DataFrame(data["data"])
            return df, None
        return None, data.get("error", "Unknown execution error")
    except requests.exceptions.RequestException as e:
        error_detail = str(e)
        try:
            error_detail = e.response.json().get('detail', str(e))
        except (ValueError, AttributeError):
            pass
        return None, error_detail


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º ---

def reset_session_state():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞."""
    st.session_state.messages = []


def show_sidebar():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å."""
    with st.sidebar:
        st.title('–ú–µ–Ω—é')
        st.info("–≠—Ç–æ —á–∞—Ç-–±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤. –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ.")
        st.divider()
        if st.button("–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç", use_container_width=True, type="primary"):
            reset_session_state()
            st.rerun()


# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---

def display_chat_view():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞."""
    st.title("ü§ñ AI SQL –ê–Ω–∞–ª–∏—Ç–∏–∫")
    st.markdown("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –µ–≥–æ –≤ SQL-–∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    st.divider()

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            if "sql" in message and message["sql"]:
                display_sql_and_results(
                    sql=message["sql"],
                    request_id=message["request_id"]
                )

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if prompt := st.chat_input("–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?"):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        with st.chat_message("assistant"):
            with st.spinner("–î—É–º–∞—é..."):
                response_data, error_msg = get_sql_from_backend(prompt)
                if error_msg:
                    response_content = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}"
                    st.error(response_content)
                    st.session_state.messages.append(
                        {"role": "assistant", "content": response_content, "sql": None, "request_id": None})
                else:
                    sql_query = response_data['generated_sql']
                    request_id = response_data['request_id']
                    response_content = "‚úÖ –í–æ—Ç SQL-–∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª:"
                    st.markdown(response_content)
                    display_sql_and_results(sql=sql_query, request_id=request_id)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    st.session_state.messages.append({
                        "role": "assistant",
                        "content": response_content,
                        "sql": sql_query,
                        "request_id": request_id
                    })


def display_sql_and_results(sql: str, request_id: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å SQL-–∑–∞–ø—Ä–æ—Å", expanded=False):
        st.code(sql, language="sql")

    with st.expander("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", expanded=True):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è—é SQL..."):
            df, err_msg = get_query_exec_result(sql)
            if err_msg:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL-–∑–∞–ø—Ä–æ—Å. –û—à–∏–±–∫–∞: {err_msg}")
            elif df is None or df.empty:
                st.info("–ó–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö.")
            else:
                data_tab, chart_tab = st.tabs(["–î–∞–Ω–Ω—ã–µ üìÑ", "–ì—Ä–∞—Ñ–∏–∫ üìâ"])
                with data_tab:
                    st.dataframe(df, use_container_width=True, height=300)
                with chart_tab:
                    display_charts_tab(df, request_id)


def display_charts_tab(df: pd.DataFrame, key_prefix: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏."""
    if len(df.columns) < 2:
        st.info("–î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∫–æ–ª–æ–Ω–∫–∏.")
        return

    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
    # numeric_cols = df.select_dtypes(include=numerics).columns.tolist()

    # if not numeric_cols:
    #     st.warning("–í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
    #     return

    col1, col2 = st.columns(2)
    x_col = col1.selectbox("–û—Å—å X", options=df.columns, key=f"x_col_{key_prefix}")
    y_col = col2.selectbox("–û—Å—å Y", options=df.columns, key=f"y_col_{key_prefix}")

    chart_type = st.selectbox(
        "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞",
        options=["–õ–∏–Ω–µ–π–Ω—ã–π üìà", "–°—Ç–æ–ª–±—á–∞—Ç—ã–π üìä"],
        key=f"chart_type_{key_prefix}",
    )

    try:
        chart_df = df.set_index(x_col)
        if chart_type == "–õ–∏–Ω–µ–π–Ω—ã–π üìà":
            st.line_chart(chart_df[y_col])
        elif chart_type == "–°—Ç–æ–ª–±—á–∞—Ç—ã–π üìä":
            st.bar_chart(chart_df[y_col])
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")


if __name__ == "__main__":
    main()